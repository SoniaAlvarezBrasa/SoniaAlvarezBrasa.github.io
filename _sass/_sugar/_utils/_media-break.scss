// todo: v2. mixins container() e item()

// ----------------------------------------- //
// --- CUADRICULAS, LINEAS Y CELDAS FLEX --- //
// ----------------------------------------- //

// El contenido ó celda es una columna del continente ó línea, ambos wrap

// Variables tamaño screen de dispositivo
// Añadir o quitar segun necesidades.
$breakpoints: (
    vw10: 10em,
    vw20: 20em,
    vw25: 25em,
    vw30: 30em,
    vw35: 35em,
    vw40: 40em,
    vw45: 45em,
    vw50: 50em,
    vw55: 55em,
    vw60: 60em,
    vw65: 65em,
    vw70: 70em,
    vw75: 75em,
    vw80: 80em,
    vw85: 85em,
    vw90: 90em,
    vw95: 95em,
    vw100: 100em,
    vw105: 105em,
    vw110: 110em,
    vw115: 115em,
    vw120: 120em,
    vw125: 125em,
    vw130: 130em,
    vw135: 135em,
    movil  : 32rem,
    tablet : 48rem,
    web    : 64rem,
    // web    : 980px,
    hd     : 90rem
);

//----------- MEDIA QUERIES POR $BREAKPOINTS  -----------//
// Mixins para media queries
// El parámetro es el nombre del breakpoint

@mixin hasta($size){
    @if map-has-key($breakpoints,$size){
        // Si el parámetro es el nombre de un tamaño, se extrae desde el map
        @media screen and (max-width: map-get($breakpoints,$size) - 1){
            @content;
        }
    } @else {
        // Si el parámetro no existe en el map, se toma su valor para construir la media query
        @media screen and (max-width: $size){
            @content;
        }
    }
}

@mixin desde($size){
    @if map-has-key($breakpoints,$size){
        // Si el parámetro es el nombre de un tamaño, se extrae desde el map
        @media screen and (min-width: map-get($breakpoints,$size)){
            @content;
        }
    } @else {
        // Si el parámetro no existe en el map, se toma su valor para construir la media query
        @media screen and (min-width: $size){
            @content;
        }
    }
}

@mixin desde-hasta($desde,$hasta){
    @if map-has-key($breakpoints,$desde) and map-has-key($breakpoints,$hasta){
        @media screen and (min-width: map-get($breakpoints,$desde)) and (max-width: map-get($breakpoints,$hasta) - 1){
            @content;
        }
    } @else if map-has-key($breakpoints,$desde) and not map-has-key($breakpoints,$hasta){
        @media screen and (min-width: map-get($breakpoints,$desde)) and (max-width: $hasta) {
            @content;
        }
    } @else if not map-has-key($breakpoints,$desde) and map-has-key($breakpoints,$hasta) {
        @media screen and (min-width: $desde) and (max-width: map-get($breakpoints,$hasta) - 1){
            @content;
        }
    } @else {
        @media screen and (min-width: $desde) and (max-width: $hasta){
            @content;
        }
    }
}

//----------- MEDIA QUERIES POR INTEGER -----------//

// Fracciones para ancho de columna
$fracciones: (
tercios : 3,
sextos  : 6,
octavos : 8
);

// Tamaños base en porcentajes
@for $i from 1 through 20 {
    .base-#{$i*5},
    .celda.base-#{$i*5},
    .contenido.base-#{$i*5}{
        width: unquote($i*5 + "%");
    }
}

// Tamaños base en fracciones
@each $fraccion-nombre, $fraccion in $fracciones{
    @for $i from 1 through $fraccion{
        .base-#{$i}-#{$fraccion},
        .celda.base-#{$i}-#{$fraccion},
        .contenido.base-#{$i}-#{$fraccion}{
            width: (100% / $fraccion) * $i;
        }
    }
}

// Breakpoints
@each $size, $screen-size in $breakpoints{
    // Loops para tamaños en porcentajes y fracciones
    @media all and (min-width: $screen-size){
        // Tamaños en porcentajes
        @for $i from 1 through 20 {
            .#{$size}-#{$i*5},
            .celda.#{$size}-#{$i*5},
            .contenido.#{$size}-#{$i*5}{
                width: unquote($i*5 + "%");
            }
        }
        //Tamaño en fracciones
        @each $fraccion-nombre, $fraccion in $fracciones{
            @for $i from 1 through $fraccion{
                .#{$size}-#{$i}-#{$fraccion},
                .celda.#{$size}-#{$i}-#{$fraccion},
                .contenido.#{$size}-#{$i}-#{$fraccion}{
                    width: (100% / $fraccion) * $i;
                }
            }
        }
    }
}

//
// Mixin para controlar el padding
// El parámetro multiplica el padding base.
// NOTA: Revisar el :auto
// @mixin padding($numero:1){
//   padding-left: $padding * $numero;
//   padding-right: $padding * $numero;
// }
